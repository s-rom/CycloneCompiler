# ----------- FUNC: print_n_spaces ----------- 
f2: skip
    pmb f2
    t28 = " "                 # Aux var
    t14 = t28                 # 'space' = expr
    t29 = 0                   # Aux var
    t15 = t29                 # 'spc' = expr
e0: skip                      # Loop init
    # Relational
    t30 = -1
    if ( t15 < t13 ) goto e2
    t30 = 0
e2: skip
    if ( t30 == 0 ) goto e1
    t31 = " "                 # Aux var
    output t31
    t32 = 1                   # Aux var
    t33 = t15 + t32
    t15 = t33                 # 'spc' = expr
    goto e0
e1: skip                      # Loop final
    return
# -------------- END ------------- 
# ----------- FUNC: pyramid ----------- 
f3: skip
    pmb f3
    t34 = 0                   # Aux var
    t17 = t34                 # 'row' = expr
    t35 = 0                   # Aux var
    t19 = t35                 # 'left_spaces' = expr
    t36 = "o "                # Aux var
    t21 = t36                 # 'symbol' = expr
    t37 = 6                   # Aux var
    t22 = t37                 # const 'CONSOLAS' = expr
    t38 = 0                   # Aux var
    t23 = t38                 # 'r' = expr
    t39 = 0                   # Aux var
    t24 = t39                 # 'g' = expr
    t40 = 255                 # Aux var
    t25 = t40                 # 'b' = expr
e3: skip                      # Loop init
    # Relational
    t41 = -1
    if ( t17 <= t16 ) goto e5
    t41 = 0
e5: skip
    if ( t41 == 0 ) goto e4
    t42 = t16 - t17
    t19 = t42                 # 'left_spaces' = expr
    t43 = 2                   # Aux var
    t44 = t19 + t43
    param t44
    call f2
    t45 = 0                   # Aux var
    t18 = t45                 # 'col' = expr
e6: skip                      # Loop init
    # Relational
    t46 = -1
    if ( t18 < t17 ) goto e8
    t46 = 0
e8: skip
    if ( t46 == 0 ) goto e7
    t47 = 2                   # Aux var
    t48 = t18 % t47
    t49 = 2                   # Aux var
    t50 = t17 % t49
    # Relational
    t51 = -1
    if ( t50 == t48 ) goto e9
    t51 = 0
e9: skip
    if ( t51 == 0 ) goto e10
    t52 = 160                 # Aux var
    t23 = t52                 # 'r' = expr
    t53 = 54                  # Aux var
    t24 = t53                 # 'g' = expr
    t54 = 210                 # Aux var
    t25 = t54                 # 'b' = expr
    goto e11
e10: skip
    t55 = 215                 # Aux var
    t23 = t55                 # 'r' = expr
    t56 = 155                 # Aux var
    t24 = t56                 # 'g' = expr
    t57 = 235                 # Aux var
    t25 = t57                 # 'b' = expr
e11: skip
    param t23
    param t24
    param t25
    t58 = 14                  # Aux var
    param t58
    param t22
    t59 = 0                   # Aux var
    param t59
    call f1
    output t21
    t60 = 1                   # Aux var
    t61 = t18 + t60
    t18 = t61                 # 'col' = expr
    goto e6
e7: skip                      # Loop final
    t62 = 1                   # Aux var
    t63 = t17 + t62
    t17 = t63                 # 'row' = expr
    t64 = ""                  # Aux var
    outputln t64
    goto e3
e4: skip                      # Loop final
    return
# -------------- END ------------- 
# ----------- FUNC: cyclone ----------- 
f4: skip
    pmb f4
    t65 = 6                   # Aux var
    t26 = t65                 # const 'CONSOLAS' = expr
    t66 = 255                 # Aux var
    param t66
    t67 = 255                 # Aux var
    param t67
    t68 = 255                 # Aux var
    param t68
    t69 = 14                  # Aux var
    param t69
    param t26
    t70 = 0                   # Aux var
    param t70
    call f1
    t71 = "Introduce un entero entre 1 y 16: "# Aux var
    output t71
    read_int t72
    t27 = t72                 # 'levels' = expr
    t73 = 16                  # Aux var
    # Relational
    t74 = -1
    if ( t27 > t73 ) goto e12
    t74 = 0
e12: skip
    t75 = 0                   # Aux var
    # Relational
    t76 = -1
    if ( t27 <= t75 ) goto e13
    t76 = 0
e13: skip
    t77 = t76 || t74
    if ( t77 == 0 ) goto e14
    t78 = "Número inválido : "# Aux var
    output t78
    output t27
    t79 = ". Por defecto n = 8"# Aux var
    output t79
    t80 = ""                  # Aux var
    outputln t80
    t81 = 8                   # Aux var
    t27 = t81                 # 'levels' = expr
e14: skip
    t82 = "Pirámide de "      # Aux var
    output t82
    output t27
    t83 = " niveles"          # Aux var
    output t83
    t84 = ""                  # Aux var
    outputln t84
    param t27
    call f3
    return
# -------------- END ------------- 
