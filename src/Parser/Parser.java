
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;
import AST.Primary.PrimaryType;
import AST.Instruction.InstructionType;
import cyclonecompiler.InfoDump;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\004\004\000\002\004\003\000\002" +
    "\003\013\000\002\006\002\000\002\006\003\000\002\006" +
    "\005\000\002\005\004\000\002\007\003\000\002\011\002" +
    "\000\002\011\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\012\003\000\002\015\011\000\002" +
    "\013\003\000\002\016\011\000\002\016\015\000\002\014" +
    "\006\000\002\014\005\000\002\014\006\000\002\014\004" +
    "\000\002\014\003\000\002\023\002\000\002\023\004\000" +
    "\002\022\002\000\002\022\005\000\002\017\007\000\002" +
    "\017\004\000\002\017\006\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\021\004\000\002\021\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\024\005\000" +
    "\002\024\006\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\010\007\006\001\002\000\004\002" +
    "\166\001\002\000\004\002\000\001\002\000\012\046\012" +
    "\047\016\050\013\051\014\001\002\000\006\002\ufff6\007" +
    "\006\001\002\000\004\002\uffff\001\002\000\004\002\ufff7" +
    "\001\002\000\004\045\ufffd\001\002\000\004\045\ufffb\001" +
    "\002\000\004\045\ufffe\001\002\000\004\045\017\001\002" +
    "\000\004\045\ufffc\001\002\000\004\013\020\001\002\000" +
    "\012\014\ufff4\046\022\047\026\051\024\001\002\000\004" +
    "\014\032\001\002\000\004\045\ufff9\001\002\000\004\045" +
    "\031\001\002\000\004\045\ufffa\001\002\000\006\014\ufff3" +
    "\017\027\001\002\000\004\045\ufff8\001\002\000\012\014" +
    "\ufff4\046\022\047\026\051\024\001\002\000\004\014\ufff2" +
    "\001\002\000\006\014\ufff1\017\ufff1\001\002\000\004\015" +
    "\033\001\002\000\030\004\037\005\043\010\053\011\035" +
    "\012\040\016\uffef\021\051\045\044\046\022\047\026\051" +
    "\024\001\002\000\004\020\165\001\002\000\004\013\163" +
    "\001\002\000\030\004\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\016\uffed\021\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\001\002\000\004\013\155\001\002\000\020\013\066\024" +
    "\065\026\062\041\067\042\057\043\060\045\063\001\002" +
    "\000\004\045\151\001\002\000\030\004\uffec\005\uffec\010" +
    "\uffec\011\uffec\012\uffec\016\uffec\021\uffec\045\uffec\046\uffec" +
    "\047\uffec\051\uffec\001\002\000\004\013\137\001\002\000" +
    "\006\013\132\040\133\001\002\000\030\004\uffe8\005\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\016\uffe8\021\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\001\002\000\004\016\131\001\002" +
    "\000\030\004\uffea\005\uffea\010\uffea\011\uffea\012\uffea\016" +
    "\uffea\021\uffea\045\uffea\046\uffea\047\uffea\051\uffea\001\002" +
    "\000\004\020\uffe1\001\002\000\010\046\022\047\026\051" +
    "\024\001\002\000\030\004\037\005\043\010\053\011\035" +
    "\012\040\016\uffef\021\051\045\044\046\022\047\026\051" +
    "\024\001\002\000\004\013\055\001\002\000\004\016\ufff0" +
    "\001\002\000\020\013\066\024\065\026\062\041\067\042" +
    "\057\043\060\045\063\001\002\000\036\014\123\022\072" +
    "\023\110\025\073\026\102\027\074\030\104\031\076\032" +
    "\075\033\101\034\103\035\107\036\106\037\100\001\002" +
    "\000\042\014\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\042\014" +
    "\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\001\002\000\020\013\066\024\065" +
    "\026\062\041\067\042\057\043\060\045\063\001\002\000" +
    "\020\013\uffc7\024\uffc7\026\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\001\002\000\044\013\112\014\uffc3\017\uffc3\020" +
    "\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\001\002\000\042\014\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002" +
    "\000\020\013\uffc6\024\uffc6\026\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\045\uffc6\001\002\000\020\013\066\024\065\026\062" +
    "\041\067\042\057\043\060\045\063\001\002\000\042\014" +
    "\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\001\002\000\042\014\uffd5\017\uffd5" +
    "\020\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\001\002\000\036\014\105\022\072\023\110\025" +
    "\073\026\102\027\074\030\104\031\076\032\075\033\101" +
    "\034\103\035\107\036\106\037\100\001\002\000\020\013" +
    "\uffd3\024\uffd3\026\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3" +
    "\001\002\000\020\013\uffd2\024\uffd2\026\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\045\uffd2\001\002\000\020\013\uffd0\024\uffd0" +
    "\026\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\001\002\000" +
    "\020\013\uffcb\024\uffcb\026\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\001\002\000\020\013\uffce\024\uffce\026\uffce\041" +
    "\uffce\042\uffce\043\uffce\045\uffce\001\002\000\020\013\066" +
    "\024\065\026\062\041\067\042\057\043\060\045\063\001" +
    "\002\000\020\013\uffc9\024\uffc9\026\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\045\uffc9\001\002\000\020\013\uffca\024\uffca\026" +
    "\uffca\041\uffca\042\uffca\043\uffca\045\uffca\001\002\000\020" +
    "\013\uffd1\024\uffd1\026\uffd1\041\uffd1\042\uffd1\043\uffd1\045" +
    "\uffd1\001\002\000\020\013\uffcd\024\uffcd\026\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\045\uffcd\001\002\000\020\013\uffcf\024" +
    "\uffcf\026\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\001\002" +
    "\000\042\014\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\020\013" +
    "\uffc8\024\uffc8\026\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8" +
    "\001\002\000\020\013\uffcc\024\uffcc\026\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\045\uffcc\001\002\000\020\013\uffd4\024\uffd4" +
    "\026\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\001\002\000" +
    "\042\014\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000\022\013\066" +
    "\014\uffe0\024\065\026\062\041\067\042\057\043\060\045" +
    "\063\001\002\000\040\014\uffde\017\117\022\072\023\110" +
    "\025\073\026\102\027\074\030\104\031\076\032\075\033" +
    "\101\034\103\035\107\036\106\037\100\001\002\000\004" +
    "\014\115\001\002\000\042\014\uffc4\017\uffc4\020\uffc4\022" +
    "\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\001" +
    "\002\000\004\014\uffdf\001\002\000\020\013\066\024\065" +
    "\026\062\041\067\042\057\043\060\045\063\001\002\000" +
    "\040\014\uffde\017\117\022\072\023\110\025\073\026\102" +
    "\027\074\030\104\031\076\032\075\033\101\034\103\035" +
    "\107\036\106\037\100\001\002\000\004\014\uffdd\001\002" +
    "\000\042\014\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002\000\004\020" +
    "\uffe3\001\002\000\004\016\uffee\001\002\000\004\045\126" +
    "\001\002\000\004\040\127\001\002\000\020\013\066\024" +
    "\065\026\062\041\067\042\057\043\060\045\063\001\002" +
    "\000\036\020\uffdc\022\072\023\110\025\073\026\102\027" +
    "\074\030\104\031\076\032\075\033\101\034\103\035\107" +
    "\036\106\037\100\001\002\000\006\002\ufff5\007\ufff5\001" +
    "\002\000\022\013\066\014\uffe0\024\065\026\062\041\067" +
    "\042\057\043\060\045\063\001\002\000\020\013\066\024" +
    "\065\026\062\041\067\042\057\043\060\045\063\001\002" +
    "\000\036\020\uffd9\022\072\023\110\025\073\026\102\027" +
    "\074\030\104\031\076\032\075\033\101\034\103\035\107" +
    "\036\106\037\100\001\002\000\004\014\136\001\002\000" +
    "\004\020\uffe5\001\002\000\020\013\066\024\065\026\062" +
    "\041\067\042\057\043\060\045\063\001\002\000\036\014" +
    "\141\022\072\023\110\025\073\026\102\027\074\030\104" +
    "\031\076\032\075\033\101\034\103\035\107\036\106\037" +
    "\100\001\002\000\004\015\142\001\002\000\030\004\037" +
    "\005\043\010\053\011\035\012\040\016\uffef\021\051\045" +
    "\044\046\022\047\026\051\024\001\002\000\004\016\144" +
    "\001\002\000\032\004\uffe7\005\uffe7\006\145\010\uffe7\011" +
    "\uffe7\012\uffe7\016\uffe7\021\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\001\002\000\004\015\146\001\002\000\030\004" +
    "\037\005\043\010\053\011\035\012\040\016\uffef\021\051" +
    "\045\044\046\022\047\026\051\024\001\002\000\004\016" +
    "\150\001\002\000\030\004\uffe6\005\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\016\uffe6\021\uffe6\045\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\001\002\000\006\020\uffdb\040\152\001\002\000\020" +
    "\013\066\024\065\026\062\041\067\042\057\043\060\045" +
    "\063\001\002\000\036\020\uffda\022\072\023\110\025\073" +
    "\026\102\027\074\030\104\031\076\032\075\033\101\034" +
    "\103\035\107\036\106\037\100\001\002\000\036\020\uffe2" +
    "\022\072\023\110\025\073\026\102\027\074\030\104\031" +
    "\076\032\075\033\101\034\103\035\107\036\106\037\100" +
    "\001\002\000\020\013\066\024\065\026\062\041\067\042" +
    "\057\043\060\045\063\001\002\000\036\014\157\022\072" +
    "\023\110\025\073\026\102\027\074\030\104\031\076\032" +
    "\075\033\101\034\103\035\107\036\106\037\100\001\002" +
    "\000\004\015\160\001\002\000\030\004\037\005\043\010" +
    "\053\011\035\012\040\016\uffef\021\051\045\044\046\022" +
    "\047\026\051\024\001\002\000\004\016\162\001\002\000" +
    "\030\004\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\016\uffe9" +
    "\021\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002\000" +
    "\004\014\164\001\002\000\004\020\uffe4\001\002\000\030" +
    "\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\016\uffeb\021" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\051\uffeb\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\014\001\001" +
    "\000\006\003\006\004\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\024\006\020\030\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\024" +
    "\006\027\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\045\010\051\011\053" +
    "\012\035\013\041\014\033\015\046\016\044\017\047\030" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\153\021\063\024" +
    "\067\026\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\124\001\001\000\024\010\051\011\123\012\035\013" +
    "\041\014\033\015\046\016\044\017\047\030\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\055\021" +
    "\063\024\067\026\060\001\001\000\004\025\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\121\024" +
    "\067\026\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\070\021" +
    "\063\024\067\026\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\110\024\067\026\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\112\021\063\023\113\024\067\026\060\001" +
    "\001\000\006\022\115\025\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\117\021" +
    "\063\024\067\026\060\001\001\000\006\022\120\025\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\127\021\063\024\067\026\060\001\001\000" +
    "\004\025\076\001\001\000\002\001\001\000\014\020\112" +
    "\021\063\023\134\024\067\026\060\001\001\000\012\020" +
    "\133\021\063\024\067\026\060\001\001\000\004\025\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\137\021\063\024\067\026\060\001\001\000\004\025\076" +
    "\001\001\000\002\001\001\000\026\007\142\010\051\011" +
    "\053\012\035\013\041\014\033\015\046\016\044\017\047" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\146\010\051\011\053\012\035" +
    "\013\041\014\033\015\046\016\044\017\047\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\152\021\063\024\067\026\060\001\001\000" +
    "\004\025\076\001\001\000\004\025\076\001\001\000\012" +
    "\020\155\021\063\024\067\026\060\001\001\000\004\025" +
    "\076\001\001\000\002\001\001\000\026\007\160\010\051" +
    "\011\053\012\035\013\041\014\033\015\046\016\044\017" +
    "\047\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String get_report_name(int sym){
        final String[] report_names = new String[] {
        "EOF","error","while","if","else","func","output","input","return",
        "(",")","{","}",", (comma)","; (semicolon)","&&","||","!","+","-","*",
        "/","%",">=","<=",">","<","!=","==","=","int literal","string literal",
        "bool literal","-",
        "ID","string type","int type","void type","bool type"
        };
        
        return report_names[sym];
    }

    
    @Override
    public void syntax_error(Symbol current){
        final String C = "\"";
        ComplexSymbol cs = (ComplexSymbol) current;
        int sym_code = ((Symbol)this.stack.peek()).sym;
        Symbol prev_sym = (Symbol) this.stack.peek();
        String prev = get_report_name(sym_code);
        String found = get_report_name(cs.sym);
        
        
        String found_attr = cs.value != null ? " ("+cs.value.toString()+")" : "";
        String prev_attr = prev_sym.value != null ? " ("+prev_sym.value.toString()+")" : "";
        
        InfoDump.reportSyntacticError("Found "+C+found + found_attr+C
                +" after "+C+prev+prev_attr+C+" in line "+
                (cs.xleft.getLine()+1)+", column "+(cs.xleft.getColumn()+1));
    }

    public int getLine(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getLine();
    }

    public int getColumn(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getColumn();
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program((FunctionList) fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TypeFunc ::= BOOL_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypeFunc ::= STR_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TypeFunc ::= INT_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TypeFunc ::= VOID_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TypeVar ::= BOOL_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeVar ::= STR_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeVar ::= INT_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionList ::= Function FunctionList 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionList((Function) f, (FunctionList) fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionList ::= Function 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionList((Function) f, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Function ::= FUNC TypeFunc ID LPAREN Args RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(t, id, (Args) args, (Block) b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Args ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Args ::= Arg 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args((Arg) a, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Args ::= Arg COMMA Args 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node as = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args((Arg) a, (Args) as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Arg ::= TypeVar ID 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arg(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Block ::= StatementList 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Block((StatementList) sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement StatementList 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementList((Statement) s, (StatementList) sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= Loop 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Conditional 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= Instruction SEMICOLON 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Loop ::= WhileLoop 
            {
              Node RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop((WhileLoop) wl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WhileLoop ::= WHILE LPAREN Expr RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileLoop((Expr) e, (Block) b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Conditional ::= IfCondition 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Conditional((IfCondition) ic); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfCondition ::= IF LPAREN Expr RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfCondition((Expr) e, (Block) b1, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfCondition ::= IF LPAREN Expr RPAREN LCURL Block RCURL ELSE LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node b1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfCondition((Expr) e, (Block) b1, (Block) b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruction ::= ID LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instruction(new FunctionCall(id, (ExprArg)ea,getLine(),getColumn())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruction ::= INPUT LPAREN RPAREN 
            {
              Node RESULT =null;
		 RESULT = new Instruction(InstructionType.INPUT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruction ::= OUTPUT LPAREN Expr RPAREN 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instruction((Expr)e, InstructionType.OUTPUT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruction ::= RETURN Expr 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction((Expr)e, InstructionType.RETURN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruction ::= Assignation 
            {
              Node RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node assign = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction((Assignation)assign); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExprArg ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExprArg ::= Expr ExprList 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node el = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprArg((Expr)e, (ExprList)el);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExprList ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExprList ::= COMMA Expr ExprList 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node el = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList((Expr)e, (ExprList)el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignation ::= CONST TypeVar ID ASSIGN Expr 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id,(Expr)e, true, getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Assignation ::= TypeVar ID 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id,null,false,getLine(),getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Assignation ::= TypeVar ID ASSIGN Expr 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id, (Expr) e,false,getLine(),getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Assignation ::= ID ASSIGN Expr 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(id, (Expr)e,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= UnExpr 
            {
              Node RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ue = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expr(null, null, (UnExpr) ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= Expr BinOp UnExpr 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ue = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expr((Expr) e, bo, (UnExpr) ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // UnExpr ::= UnOp UnExpr 
            {
              Node RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnExpr(u, (UnExpr)e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // UnExpr ::= Primary 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnExpr(null, null, (Primary)p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BinOp ::= OR 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BinOp ::= AND 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BinOp ::= SUM 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BinOp ::= SUB 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BinOp ::= MULT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BinOp ::= DIV 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BinOp ::= MOD 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BinOp ::= GT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BinOp ::= LT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BinOp ::= GE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BinOp ::= LE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BinOp ::= EQ 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BinOp ::= NE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // UnOp ::= SUB 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnOp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // UnOp ::= NOT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnOp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Primary ::= LPAREN Expr RPAREN 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Primary((Expr) e,getLine(),getColumn());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Primary ::= ID LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Primary(new FunctionCall(id,(ExprArg)param,getLine(),getColumn()),id,getLine(),getColumn());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Primary ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(id,PrimaryType.ID,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Primary ::= INT_LIT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(i,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Primary ::= STR_LIT 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(str,PrimaryType.STR_LIT,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Primary ::= BOOL_LIT 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(b,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
