
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;
import AST.Primary.PrimaryType;
import AST.Instruction.InstructionType;
import cyclonecompiler.InfoDump;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\004\004\000\002\004\003\000\002" +
    "\003\013\000\002\003\013\000\002\006\002\000\002\006" +
    "\003\000\002\006\005\000\002\005\004\000\002\007\003" +
    "\000\002\011\002\000\002\011\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\004\000\002\012\003\000\002" +
    "\015\011\000\002\013\003\000\002\016\011\000\002\016" +
    "\015\000\002\014\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\023\002\000\002\023\004\000\002\022\002\000\002" +
    "\022\005\000\002\017\007\000\002\017\004\000\002\017" +
    "\006\000\002\017\005\000\002\031\007\000\002\031\007" +
    "\000\002\020\003\000\002\020\005\000\002\021\004\000" +
    "\002\021\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\024\005\000\002\024\006\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\010\003\010\007\006\056\011\001\002\000" +
    "\004\002\216\001\002\000\004\002\000\001\002\000\012" +
    "\052\012\053\016\054\013\055\014\001\002\000\010\002" +
    "\ufff6\007\006\056\011\001\002\000\004\002\uffff\001\002" +
    "\000\012\052\012\053\016\054\013\055\014\001\002\000" +
    "\004\051\ufffd\001\002\000\004\051\ufffb\001\002\000\004" +
    "\051\ufffe\001\002\000\004\051\017\001\002\000\004\051" +
    "\ufffc\001\002\000\004\012\020\001\002\000\012\013\ufff3" +
    "\052\022\053\026\055\024\001\002\000\004\013\032\001" +
    "\002\000\006\021\ufff9\051\ufff9\001\002\000\004\051\031" +
    "\001\002\000\006\021\ufffa\051\ufffa\001\002\000\006\013" +
    "\ufff2\016\027\001\002\000\006\021\ufff8\051\ufff8\001\002" +
    "\000\012\013\ufff3\052\022\053\026\055\024\001\002\000" +
    "\004\013\ufff1\001\002\000\006\013\ufff0\016\ufff0\001\002" +
    "\000\004\057\033\001\002\000\004\046\034\001\002\000" +
    "\004\017\035\001\002\000\010\002\ufff4\007\ufff4\056\ufff4" +
    "\001\002\000\004\002\ufff7\001\002\000\004\051\040\001" +
    "\002\000\004\012\041\001\002\000\012\013\ufff3\052\022" +
    "\053\026\055\024\001\002\000\004\013\043\001\002\000" +
    "\004\014\044\001\002\000\030\004\047\005\053\010\065" +
    "\011\050\015\uffee\020\062\023\064\051\054\052\022\053" +
    "\026\055\024\001\002\000\004\017\215\001\002\000\030" +
    "\004\uffec\005\uffec\010\uffec\011\uffec\015\uffec\020\uffec\023" +
    "\uffec\051\uffec\052\uffec\053\uffec\055\uffec\001\002\000\004" +
    "\012\207\001\002\000\024\012\103\024\074\025\102\030" +
    "\100\032\075\045\104\046\072\047\071\051\076\001\002" +
    "\000\006\021\175\051\174\001\002\000\030\004\uffeb\005" +
    "\uffeb\010\uffeb\011\uffeb\015\uffeb\020\uffeb\023\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\055\uffeb\001\002\000\004\012\162\001" +
    "\002\000\006\012\155\044\156\001\002\000\030\004\uffe7" +
    "\005\uffe7\010\uffe7\011\uffe7\015\uffe7\020\uffe7\023\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\055\uffe7\001\002\000\004\017\uffdf" +
    "\001\002\000\004\015\154\001\002\000\030\004\uffe9\005" +
    "\uffe9\010\uffe9\011\uffe9\015\uffe9\020\uffe9\023\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\055\uffe9\001\002\000\004\017\uffe0\001" +
    "\002\000\010\052\022\053\026\055\024\001\002\000\030" +
    "\004\047\005\053\010\065\011\050\015\uffee\020\062\023" +
    "\064\051\054\052\022\053\026\055\024\001\002\000\004" +
    "\012\144\001\002\000\004\012\067\001\002\000\004\015" +
    "\uffef\001\002\000\026\012\103\013\uffde\024\074\025\102" +
    "\030\100\032\075\045\104\046\072\047\071\051\076\001" +
    "\002\000\040\013\uffdc\016\141\026\107\027\125\031\110" +
    "\032\117\033\113\034\120\035\111\036\112\037\116\040" +
    "\121\041\124\042\123\043\115\001\002\000\042\013\uffbc" +
    "\016\uffbc\017\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\001\002\000\042\013\uffbd\016\uffbd\017" +
    "\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\001\002\000\024\012\103\024\074\025\102\030\100" +
    "\032\075\045\104\046\072\047\071\051\076\001\002\000" +
    "\004\012\135\001\002\000\024\012\uffc3\024\uffc3\025\uffc3" +
    "\030\uffc3\032\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\001" +
    "\002\000\044\012\132\013\uffbf\016\uffbf\017\uffbf\026\uffbf" +
    "\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002" +
    "\000\042\013\uffd4\016\uffd4\017\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002\000\024\012" +
    "\uffc2\024\uffc2\025\uffc2\030\uffc2\032\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\001\002\000\004\013\131\001\002\000" +
    "\004\012\127\001\002\000\024\012\103\024\074\025\102" +
    "\030\100\032\075\045\104\046\072\047\071\051\076\001" +
    "\002\000\042\013\uffbe\016\uffbe\017\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000\042" +
    "\013\uffd1\016\uffd1\017\uffd1\026\uffd1\027\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\001\002\000\036\013\122\026" +
    "\107\027\125\031\110\032\117\033\113\034\120\035\111" +
    "\036\112\037\116\040\121\041\124\042\123\043\115\001" +
    "\002\000\024\012\uffcf\024\uffcf\025\uffcf\030\uffcf\032\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\051\uffcf\001\002\000\024\012" +
    "\uffce\024\uffce\025\uffce\030\uffce\032\uffce\045\uffce\046\uffce" +
    "\047\uffce\051\uffce\001\002\000\024\012\uffca\024\uffca\025" +
    "\uffca\030\uffca\032\uffca\045\uffca\046\uffca\047\uffca\051\uffca" +
    "\001\002\000\024\012\uffc7\024\uffc7\025\uffc7\030\uffc7\032" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\001\002\000\024" +
    "\012\uffcc\024\uffcc\025\uffcc\030\uffcc\032\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\001\002\000\024\012\103\024\074" +
    "\025\102\030\100\032\075\045\104\046\072\047\071\051" +
    "\076\001\002\000\024\012\uffc5\024\uffc5\025\uffc5\030\uffc5" +
    "\032\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\001\002\000" +
    "\024\012\uffc6\024\uffc6\025\uffc6\030\uffc6\032\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\051\uffc6\001\002\000\024\012\uffcd\024" +
    "\uffcd\025\uffcd\030\uffcd\032\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\051\uffcd\001\002\000\024\012\uffcb\024\uffcb\025\uffcb\030" +
    "\uffcb\032\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\001\002" +
    "\000\024\012\uffc9\024\uffc9\025\uffc9\030\uffc9\032\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\001\002\000\042\013\uffc1" +
    "\016\uffc1\017\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\001\002\000\024\012\uffc4\024\uffc4\025" +
    "\uffc4\030\uffc4\032\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\001\002\000\024\012\uffc8\024\uffc8\025\uffc8\030\uffc8\032" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\001\002\000\024" +
    "\012\uffd0\024\uffd0\025\uffd0\030\uffd0\032\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\051\uffd0\001\002\000\042\013\uffd3\016\uffd3" +
    "\017\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\001\002\000\004\013\130\001\002\000\042\013" +
    "\uffba\016\uffba\017\uffba\026\uffba\027\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\001\002\000\004\017\uffe3\001\002" +
    "\000\026\012\103\013\uffde\024\074\025\102\030\100\032" +
    "\075\045\104\046\072\047\071\051\076\001\002\000\004" +
    "\013\134\001\002\000\042\013\uffc0\016\uffc0\017\uffc0\026" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001" +
    "\002\000\004\013\136\001\002\000\042\013\uffbb\016\uffbb" +
    "\017\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\001\002\000\042\013\uffd2\016\uffd2\017\uffd2\026" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\001" +
    "\002\000\004\013\uffdd\001\002\000\024\012\103\024\074" +
    "\025\102\030\100\032\075\045\104\046\072\047\071\051" +
    "\076\001\002\000\040\013\uffdc\016\141\026\107\027\125" +
    "\031\110\032\117\033\113\034\120\035\111\036\112\037" +
    "\116\040\121\041\124\042\123\043\115\001\002\000\004" +
    "\013\uffdb\001\002\000\026\012\103\013\uffde\024\074\025" +
    "\102\030\100\032\075\045\104\046\072\047\071\051\076" +
    "\001\002\000\004\013\146\001\002\000\004\017\uffe2\001" +
    "\002\000\004\015\uffed\001\002\000\004\051\151\001\002" +
    "\000\004\044\152\001\002\000\024\012\103\024\074\025" +
    "\102\030\100\032\075\045\104\046\072\047\071\051\076" +
    "\001\002\000\036\017\uffda\026\107\027\125\031\110\032" +
    "\117\033\113\034\120\035\111\036\112\037\116\040\121" +
    "\041\124\042\123\043\115\001\002\000\010\002\ufff5\007" +
    "\ufff5\056\ufff5\001\002\000\026\012\103\013\uffde\024\074" +
    "\025\102\030\100\032\075\045\104\046\072\047\071\051" +
    "\076\001\002\000\024\012\103\024\074\025\102\030\100" +
    "\032\075\045\104\046\072\047\071\051\076\001\002\000" +
    "\036\017\uffd7\026\107\027\125\031\110\032\117\033\113" +
    "\034\120\035\111\036\112\037\116\040\121\041\124\042" +
    "\123\043\115\001\002\000\004\013\161\001\002\000\004" +
    "\017\uffe4\001\002\000\024\012\103\024\074\025\102\030" +
    "\100\032\075\045\104\046\072\047\071\051\076\001\002" +
    "\000\036\013\164\026\107\027\125\031\110\032\117\033" +
    "\113\034\120\035\111\036\112\037\116\040\121\041\124" +
    "\042\123\043\115\001\002\000\004\014\165\001\002\000" +
    "\030\004\047\005\053\010\065\011\050\015\uffee\020\062" +
    "\023\064\051\054\052\022\053\026\055\024\001\002\000" +
    "\004\015\167\001\002\000\032\004\uffe6\005\uffe6\006\170" +
    "\010\uffe6\011\uffe6\015\uffe6\020\uffe6\023\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\055\uffe6\001\002\000\004\014\171\001\002" +
    "\000\030\004\047\005\053\010\065\011\050\015\uffee\020" +
    "\062\023\064\051\054\052\022\053\026\055\024\001\002" +
    "\000\004\015\173\001\002\000\030\004\uffe5\005\uffe5\010" +
    "\uffe5\011\uffe5\015\uffe5\020\uffe5\023\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\055\uffe5\001\002\000\010\017\uffd9\021\201\044" +
    "\202\001\002\000\004\045\176\001\002\000\004\022\177" +
    "\001\002\000\004\051\200\001\002\000\004\017\uffd5\001" +
    "\002\000\004\045\204\001\002\000\024\012\103\024\074" +
    "\025\102\030\100\032\075\045\104\046\072\047\071\051" +
    "\076\001\002\000\036\017\uffd8\026\107\027\125\031\110" +
    "\032\117\033\113\034\120\035\111\036\112\037\116\040" +
    "\121\041\124\042\123\043\115\001\002\000\004\022\205" +
    "\001\002\000\004\017\uffd6\001\002\000\036\017\uffe1\026" +
    "\107\027\125\031\110\032\117\033\113\034\120\035\111" +
    "\036\112\037\116\040\121\041\124\042\123\043\115\001" +
    "\002\000\024\012\103\024\074\025\102\030\100\032\075" +
    "\045\104\046\072\047\071\051\076\001\002\000\036\013" +
    "\211\026\107\027\125\031\110\032\117\033\113\034\120" +
    "\035\111\036\112\037\116\040\121\041\124\042\123\043" +
    "\115\001\002\000\004\014\212\001\002\000\030\004\047" +
    "\005\053\010\065\011\050\015\uffee\020\062\023\064\051" +
    "\054\052\022\053\026\055\024\001\002\000\004\015\214" +
    "\001\002\000\030\004\uffe8\005\uffe8\010\uffe8\011\uffe8\015" +
    "\uffe8\020\uffe8\023\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8" +
    "\001\002\000\030\004\uffea\005\uffea\010\uffea\011\uffea\015" +
    "\uffea\020\uffea\023\uffea\051\uffea\052\uffea\053\uffea\055\uffea" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\010\002\003\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\036\001\001" +
    "\000\006\003\006\004\035\001\001\000\002\001\001\000" +
    "\004\027\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\024\006\020\030\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\024\006\027\030\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\024\006\041\030\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\056\010\062\011\065\012\045\013\051\014\044\015\057" +
    "\016\054\017\060\030\050\031\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\205" +
    "\021\076\024\104\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\147\001\001\000\026" +
    "\010\062\011\146\012\045\013\051\014\044\015\057\016" +
    "\054\017\060\030\050\031\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\067\021" +
    "\076\023\100\024\104\026\072\001\001\000\006\022\137" +
    "\025\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\136\024\104\026\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\105\021\076\024\104\026\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\125\024\104\026\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\067\021\076\023\132\024\104\026" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\141\021\076\024\104\026\072\001\001" +
    "\000\006\022\142\025\113\001\001\000\002\001\001\000" +
    "\014\020\067\021\076\023\144\024\104\026\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\152\021\076" +
    "\024\104\026\072\001\001\000\004\025\113\001\001\000" +
    "\002\001\001\000\014\020\067\021\076\023\157\024\104" +
    "\026\072\001\001\000\012\020\156\021\076\024\104\026" +
    "\072\001\001\000\004\025\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\162\021\076\024\104\026" +
    "\072\001\001\000\004\025\113\001\001\000\002\001\001" +
    "\000\030\007\165\010\062\011\065\012\045\013\051\014" +
    "\044\015\057\016\054\017\060\030\050\031\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\171\010\062\011\065\012\045\013\051\014\044" +
    "\015\057\016\054\017\060\030\050\031\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\202\021\076\024\104" +
    "\026\072\001\001\000\004\025\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\113\001\001\000\012" +
    "\020\207\021\076\024\104\026\072\001\001\000\004\025" +
    "\113\001\001\000\002\001\001\000\030\007\212\010\062" +
    "\011\065\012\045\013\051\014\044\015\057\016\054\017" +
    "\060\030\050\031\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // public String get_report_name(int sym){
    //     final String[] report_names = new String[] {
    //     "EOF","error","while","if","else","func","output","input","return",
    //     "(",")","{","}", "outputln", ", (comma)","; (semicolon)","&&","||","!","+","-","*",
    //     "/","%",">=","<=",">","<","!=","==","=","int literal","string literal",
    //     "bool literal","-",
    //     "ID","string type","int type","void type","bool type","declare"
    //     };
        
    //     return report_names[sym];
    // }

    
    @Override
    public void syntax_error(Symbol current){
        final String C = "\"";
        ComplexSymbol cs = (ComplexSymbol) current;
        int sym_code = ((Symbol)this.stack.peek()).sym;
        Symbol prev_sym = (Symbol) this.stack.peek();
        String prev = ParserSym.terminalNames[sym_code]; //get_report_name(sym_code);
        String found = ParserSym.terminalNames[cs.sym]; //get_report_name(cs.sym);
        
        
        String found_attr = cs.value != null ? " ("+cs.value.toString()+")" : "";
        String prev_attr = prev_sym.value != null ? " ("+prev_sym.value.toString()+")" : "";
        
        InfoDump.reportSyntacticError("Found "+C+found + found_attr+C
                +" after "+C+prev+prev_attr+C+" in line "+
                (cs.xleft.getLine()+1)+", column "+(cs.xleft.getColumn()+1));
    }

    public int getLine(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getLine();
    }

    public int getColumn(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getColumn();
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program((FunctionList) fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TypeFunc ::= BOOL_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypeFunc ::= STR_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TypeFunc ::= INT_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TypeFunc ::= VOID_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeFunc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TypeVar ::= BOOL_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeVar ::= STR_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeVar ::= INT_TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionList ::= Function FunctionList 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionList((Function) f, (FunctionList) fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionList ::= Function 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionList((Function) f, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Function ::= FUNC TypeFunc ID LPAREN Args RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(t, id, (Args) args, (Block) b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Function ::= INTERNAL TypeFunc ID LPAREN Args RPAREN ARROW STR_LIT SEMICOLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int subroutineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subroutineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String subroutine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(t, id, (Args) args, subroutine); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Args ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Args ::= Arg 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args((Arg) a, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Args ::= Arg COMMA Args 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node as = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args((Arg) a, (Args) as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Arg ::= TypeVar ID 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arg(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Block ::= StatementList 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Block((StatementList) sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= Statement StatementList 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementList((Statement) s, (StatementList) sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Loop 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= Conditional 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Instruction SEMICOLON 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Loop ::= WhileLoop 
            {
              Node RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop((WhileLoop) wl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WhileLoop ::= WHILE LPAREN Expr RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileLoop((Expr) e, (Block) b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Conditional ::= IfCondition 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Conditional((IfCondition) ic); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfCondition ::= IF LPAREN Expr RPAREN LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfCondition((Expr) e, (Block) b1, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfCondition ::= IF LPAREN Expr RPAREN LCURL Block RCURL ELSE LCURL Block RCURL 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node b1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfCondition((Expr) e, (Block) b1, (Block) b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruction ::= ID LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instruction(new FunctionCall(id, (ExprArg)ea,getLine(),getColumn())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruction ::= OUTPUT LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instruction((ExprArg)ea, InstructionType.OUTPUT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruction ::= OUTPUTLN LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instruction((ExprArg)ea, InstructionType.OUTPUTLN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruction ::= RETURN Expr 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction((Expr)e, InstructionType.RETURN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruction ::= Assignation 
            {
              Node RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node assign = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction((Assignation)assign); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruction ::= Allocation 
            {
              Node RESULT =null;
		int allocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int allocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node alloc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction((Allocation) alloc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExprArg ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExprArg ::= Expr ExprList 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node el = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprArg((Expr)e, (ExprList)el);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExprList ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExprList ::= COMMA Expr ExprList 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node el = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList((Expr)e, (ExprList)el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Assignation ::= CONST TypeVar ID ASSIGN Expr 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id,(Expr)e, true, getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Assignation ::= TypeVar ID 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id,null,false,getLine(),getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Assignation ::= TypeVar ID ASSIGN Expr 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(t,id, (Expr) e,false,getLine(),getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Assignation ::= ID ASSIGN Expr 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignation(id, (Expr)e,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Allocation ::= TypeVar ID LBRACKET INT_LIT RBRACKET 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Allocation(t, id, i, getLine(), getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Allocation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Allocation ::= TypeVar LBRACKET INT_LIT RBRACKET ID 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Allocation(t, id, i, getLine(), getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Allocation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= UnExpr 
            {
              Node RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ue = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expr(null, null, (UnExpr) ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr BinOp UnExpr 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ue = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expr((Expr) e, bo, (UnExpr) ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnExpr ::= UnOp UnExpr 
            {
              Node RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnExpr(u, (UnExpr)e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnExpr ::= Primary 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnExpr(null, null, (Primary)p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BinOp ::= OR 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BinOp ::= AND 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BinOp ::= SUM 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BinOp ::= SUB 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BinOp ::= MULT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BinOp ::= DIV 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BinOp ::= MOD 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BinOp ::= GT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BinOp ::= LT 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BinOp ::= GE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BinOp ::= LE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BinOp ::= EQ 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BinOp ::= NE 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UnOp ::= SUB 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnOp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UnOp ::= NOT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnOp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Primary ::= LPAREN Expr RPAREN 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Primary((Expr) e,getLine(),getColumn());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Primary ::= ID LPAREN ExprArg RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Primary(new FunctionCall(id,(ExprArg)param,getLine(),getColumn()),id,getLine(),getColumn());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Primary ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(id,PrimaryType.ID,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Primary ::= INT_LIT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(i,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Primary ::= STR_LIT 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(str,PrimaryType.STR_LIT,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Primary ::= BOOL_LIT 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primary(b,getLine(),getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Primary ::= READ_STRING LPAREN RPAREN 
            {
              Node RESULT =null;
		 RESULT = new Primary(PrimaryType.READ_STRING, getLine(), getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Primary ::= READ_INT LPAREN RPAREN 
            {
              Node RESULT =null;
		 RESULT = new Primary(PrimaryType.READ_INT, getLine(), getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
