package Parser;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;
import AST.Primary.PrimaryType;
import AST.Instruction.InstructionType;


parser code {:
    public String get_report_name(int sym){
        final String[] report_names = new String[] {
        "EOF","error","while","if","else","func","output","input","return",
        "(",")","{","}",", (comma)","; (semicolon)","&&","||","!","+","-","*",
        "/","%",">=","<=",">","<","!=","==","=","int literal","string literal",
        "bool literal","-",
        "ID","string type","int type","void type","bool type"
        };
        
        return report_names[sym];
    }

    
    @Override
    public void syntax_error(Symbol current){
        final String C = "\"";
        ComplexSymbol cs = (ComplexSymbol) current;
        int sym_code = ((Symbol)this.stack.peek()).sym;
        Symbol prev_sym = (Symbol) this.stack.peek();
        String prev = get_report_name(sym_code);
        String found = get_report_name(cs.sym);
        System.out.print("Syntax error: ");
        
        String found_attr = cs.value != null ? " ("+cs.value.toString()+")" : "";
        String prev_attr = prev_sym.value != null ? " ("+prev_sym.value.toString()+")" : "";
        
        System.out.println("Found "+C+found + found_attr+C
                +" after "+C+prev+prev_attr+C+" in line "+
                (cs.xleft.getLine()+1)+", column "+(cs.xleft.getColumn()+1));
    }

    public int getLine(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getLine();
    }

    public int getColumn(){
        ComplexSymbol cs = (ComplexSymbol) this.stack.peek();
        return cs.xleft.getColumn();
    }


:}


/* ------------- TERMINALS ------------- */

terminal            WHILE, IF, ELSE, FUNC, OUTPUT, INPUT, RETURN; /* while, if, else, func, intput(), output() */
terminal            LPAREN, RPAREN, LCURL, RCURL, COMMA, SEMICOLON; /* ( ) { } , ; */
terminal String     AND, OR, NOT;
terminal String     SUM, SUB, MULT, DIV, MOD; /* +, -, *, /, %  */
terminal String     GE, LE, GT, LT, NE, EQ; /* >=, <=, >, <, !=, == */
terminal            ASSIGN; /* = */
terminal Integer    INT_LIT; /* 42 */
terminal String     STR_LIT; /* "hola" */
terminal Boolean    BOOL_LIT; /* true, false */  
terminal String     UNARI_SUB; /*-3, -a*b*/
terminal String     ID; /* hola */
terminal String     STR_TYPE, INT_TYPE, VOID_TYPE, BOOL_TYPE; /* string, int, void, bool */

non terminal Node     Program, Function, FunctionList;
non terminal Node     Arg, Args;
non terminal Node     Block, Statement, StatementList;
non terminal Node     Loop, Conditional, Instruction;
non terminal Node     WhileLoop;
non terminal Node     IfCondition;
non terminal Node     Assignation;
non terminal Node     Expr, UnExpr, ExprList, ExprArg, Primary;
non terminal String   BinOp, UnOp;
non terminal String   TypeFunc, TypeVar;

precedence left SUM, SUB;
precedence left MULT, DIV, MOD;
precedence right UNARI_SUB;

precedence left OR;
precedence left AND;
precedence right NOT;

/* ------------- SYNTACTIC GRAMMAR RULES ------------- */

start with Program;

Program         ::=   FunctionList:fl
                        {: RESULT = new Program((FunctionList) fl); :}
                    | error 
                    ;

TypeFunc        ::=   BOOL_TYPE:t
                        {: RESULT = t; :}
                    | STR_TYPE:t
                        {: RESULT = t; :}
                    | INT_TYPE:t
                        {: RESULT = t; :}
                    | VOID_TYPE:t
                        {: RESULT = t; :}
                    ;

TypeVar         ::=   BOOL_TYPE:t
                        {: RESULT = t; :}
                    | STR_TYPE:t
                        {: RESULT = t; :}
                    | INT_TYPE:t
                        {: RESULT = t; :}
                    ;

FunctionList    ::=   Function:f FunctionList:fl
                        {: RESULT = new FunctionList((Function) f, (FunctionList) fl); :}
                     | Function:f
                        {: RESULT = new FunctionList((Function) f, null); :}
                     ;

Function        ::=   FUNC TypeFunc:t ID:id LPAREN Args:args RPAREN LCURL Block:b RCURL
                        {: RESULT = new Function(t, id, (Args) args, (Block) b); :}
                    ;

Args            ::= | 
                      Arg:a
                        {: RESULT = new Args((Arg) a, null); :} 
                    | Arg:a COMMA Args:as
                        {: RESULT = new Args((Arg) a, (Args) as); :}
                    ;

Arg             ::=   TypeVar:t ID:id
                        {: RESULT = new Arg(t, id); :}
                    ;



Block           ::=   StatementList:sl
                        {: RESULT = new Block((StatementList) sl); :}
                    ;

StatementList   ::= |
                      Statement:s StatementList:sl
                        {: RESULT = new StatementList((Statement) s, (StatementList) sl); :} 
                    ;

Statement       ::=   Loop:n
                        {: RESULT = new Statement(n); :}
                    | Conditional:n
                        {: RESULT = new Statement(n); :}
                    | Instruction:n SEMICOLON
                        {: RESULT = new Statement(n); :}
                    ;

Loop            ::=   WhileLoop:wl
                        {: RESULT = new Loop((WhileLoop) wl); :}
                    ;
WhileLoop       ::=   WHILE LPAREN Expr:e RPAREN LCURL Block:b RCURL
                        {: RESULT = new WhileLoop((Expr) e, (Block) b); :}
                    ;

Conditional     ::=   IfCondition:ic
                        {: RESULT = new Conditional((IfCondition) ic); :}
                    ;
IfCondition     ::=   IF LPAREN Expr:e RPAREN LCURL Block:b1 RCURL
                        {: RESULT = new IfCondition((Expr) e, (Block) b1, null); :}
                    | IF LPAREN Expr:e RPAREN LCURL Block:b1 RCURL ELSE LCURL Block:b2 RCURL
                        {: RESULT = new IfCondition((Expr) e, (Block) b1, (Block) b2); :}
                    ;

Instruction     ::=   // Llamada a funcion foo(arg1, arg2, ...)
                      ID:id LPAREN ExprArg:ea RPAREN
                        {: RESULT = new Instruction(new FunctionCall(id, (ExprArg)ea)); :}
                    | // input()
                      INPUT LPAREN RPAREN
                        {: RESULT = new Instruction(InstructionType.INPUT); :}
                    | // output(bla)
                      OUTPUT LPAREN Expr:e RPAREN
                        {: RESULT = new Instruction((Expr)e, InstructionType.OUTPUT); :}
                    | // return bla
                      RETURN Expr:e
                        {: RESULT = new Instruction((Expr)e, InstructionType.RETURN); :}
                    | // lhs = rhs
                      Assignation:assign
                        {: RESULT = new Instruction((Assignation)assign); :}
                    ;

ExprArg         ::= |
                      Expr:e ExprList:el
                        {: RESULT = new ExprArg((Expr)e, (ExprList)el);  :}
                    ;

ExprList        ::= | 
                      COMMA Expr:e ExprList:el
                        {: RESULT = new ExprList((Expr)e, (ExprList)el); :}
                  ;

Assignation     ::=   TypeVar:t ID:id //int x;
                        {: RESULT = new Assignation(t,id,null,getLine(),getColumn());:}
                    | TypeVar:t ID:id ASSIGN Expr:e //int x = ...;
                        {: RESULT = new Assignation(t,id, (Expr) e,getLine(),getColumn());:}
                    | ID:id ASSIGN Expr:e // x = ...;
                        {: RESULT = new Assignation(id, (Expr)e,getLine(),getColumn()); :}
                    ;

/* EXPRESIONES ARITMETICOLÃ“GICAS */
Expr            ::=   UnExpr:ue
                        {: RESULT = new Expr(null, null, (UnExpr) ue); :}
                    | Expr:e BinOp:bo UnExpr:ue
                        {: RESULT = new Expr((Expr) e, bo, (UnExpr) ue); :}
                    ;
UnExpr          ::=   UnOp:u UnExpr:e
                        {: RESULT = new UnExpr(u, (UnExpr)e, null); :}
                    | Primary:p
                        {: RESULT = new UnExpr(null, null, (Primary)p); :}
                    ;

BinOp           ::=   OR:bo
                        {: RESULT = bo;:}
                    | AND:bo
                        {: RESULT = bo; :}
                    | SUM:bo
                        {: RESULT = bo; :}
                    | SUB:bo
                        {: RESULT = bo; :}
                    | MULT:bo
                        {: RESULT = bo; :}
                    | DIV:bo
                        {: RESULT = bo; :}
                    | MOD:bo
                        {: RESULT = bo; :}
                    | GT:bo
                        {: RESULT = bo; :}
                    | LT:bo
                        {: RESULT = bo; :}
                    | GE:bo
                        {: RESULT = bo; :}
                    | LE:bo
                        {: RESULT = bo; :}
                    | EQ:bo
                        {: RESULT = bo; :}
                    | NE:bo
                        {: RESULT = bo; :}
                    ;

UnOp            ::=   SUB:s 
                        {: RESULT = s; :} 
                      %prec UNARI_SUB
                    | NOT:n
                        {:  RESULT = n; :}
                    ;

Primary         ::= LPAREN Expr:e RPAREN         // (a+3)
                        {: RESULT = new Primary((Expr) e,getLine(),getColumn());  :}
                    | ID:id LPAREN ExprArg:param RPAREN  // foo(x,y)
                        {: RESULT = new Primary(new FunctionCall(id,(ExprArg)param),id,getLine(),getColumn());  :}
                    | ID:id                        // b
                        {: RESULT = new Primary(id,PrimaryType.ID,getLine(),getColumn()); :}
                    | INT_LIT:i                   // 34
                        {: RESULT = new Primary(i,getLine(),getColumn()); :}
                    | STR_LIT:str                   // "hola"
                        {: RESULT = new Primary(str,PrimaryType.STR_LIT,getLine(),getColumn()); :}
                    | BOOL_LIT:b                  // false
                        {: RESULT = new Primary(b,getLine(),getColumn()); :}
                    ;