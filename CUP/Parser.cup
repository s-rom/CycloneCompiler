package Parser;
import java_cup.runtime.*;


/* ------------- TERMINALS ------------- */

terminal            STR_TYPE, INT_TYPE, VOID_TYPE, BOOL_TYPE; /* string, int, void, bool */
terminal            WHILE, IF, ELSE, FUNC, OUTPUT, INPUT, RETURN; /* while, if, else, func, intput(), output() */
terminal            LPAREN, RPAREN, LCURL, RCURL, COMMA, SEMICOLON; /* ( ) { } , ; */
terminal            AND, OR, NOT;
terminal            SUM, SUB, MULT, DIV, MOD; /* +, -, *, /, %  */
terminal            GE, LE, GT, LT, NE, EQ; /* >=, <=, >, <, !=, == */
terminal            ASSIGN; /* = */
terminal Integer    ID; /* hola */
terminal Integer    INT_LIT; /* 42 */
terminal String     STR_LIT; /* "hola" */
terminal Boolean    BOOL_LIT; /* true, false */  



non terminal Object     Program, Function, FunctionList;
non terminal Object     TypeFunc, TypeVar;
non terminal Object     Arg, Args;
non terminal Object     Block, Statement, StatementList;
non terminal Object     Loop, Conditional, Declaration, Instruction;
non terminal Object     WhileLoop;
non terminal Object     IfCondition;
non terminal Object     Expression, Assignation;
non terminal Object     AritmExp, LogicExp, StrExpr;
non terminal Object     Term, Factor;
non terminal Object     LogicTerm, LogicFactor;
non terminal Object     RelCond, OpRel, RelTerm;

/* ------------- SYNTACTIC GRAMMAR RULES ------------- */

/* Gramatica de expresiones logicas + comparaciones de enteros (i.e. todo lo que devuelva bool) */


Program     ::=   FunctionList
                | error
                ;

TypeFunc    ::=   BOOL_TYPE 
                | STR_TYPE
                | INT_TYPE
                | VOID_TYPE
                ;

TypeVar     ::=   BOOL_TYPE 
                | STR_TYPE
                | INT_TYPE
                ;

FunctionList ::=   Function FunctionList;

Function    ::=   FUNC TypeFunc ID LPAREN Args RPAREN LCURL Block RCURL;

Args        ::=   Arg
                | Arg COMMA Args
                ;

Arg         ::=   TypeVar ID
                |
                ;


Block       ::=   StatementList;

StatementList ::=   Statement StatementList
                  |
                  ;

Statement   ::=   Loop 
                | Conditional
                | Declaration SEMICOLON
                | Instruction SEMICOLON
                ;


Loop        ::=   WhileLoop;
Conditional ::=   IfCondition;

WhileLoop   ::=   WHILE LPAREN RPAREN LCURL Block RCURL;
IfCondition ::=   IF LPAREN RPAREN LCURL Block RCURL
                | IF LPAREN RPAREN LCURL Block RCURL ELSE LCURL Block RCURL
                ;

Instruction ::=   ID LPAREN Args RPAREN // Llamada a funcion foo()
                | INPUT LPAREN RPAREN   // input(var)
                | OUTPUT LPAREN RPAREN  // output(bla)
                | RETURN                // return bla
                | Assignation           // lhs = rhs
                ;



Declaration ::=   TypeVar ID 
                | TypeVar Assignation  
                ;

Assignation ::=   ID ASSIGN Expres
                ;

/* EXPRESIONES ARTIMETICAS */

Expression  ::=   AritmExp
                | LogicExp
                | StrExpr
                ;


StrExpr     ::= STR_LIT;

AritmExp    ::=   Term SUM AritmExp 
                | Term SUB AritmExp
                | Term 
                ;

Term        ::=   Factor MULT Term 
                | Factor DIV Term 
                | Factor MOD Term 
                | Factor
                ;

Factor      ::=   LPAREN AritmExp RPAREN
                | ID  
                | SUB AritmExp
                | INT_LIT
                ;


/* EXPRESIONES LÃ“GICAS */
LogicExp    ::=   LogicTerm OR LogicExp 
                | LogicTerm
                ;

LogicTerm   ::=   LogicFactor AND LogicTerm
                | LogicFactor
                ;

LogicFactor ::=   LPAREN LogicExp RPAREN
                | ID
                | NOT LogicFactor
                | RelCond
                | BOOL_LIT
                ;

OpRel       ::=   LT 
                | GT
                | LE
                | GE
                | EQ
                | NE
                ;

RelCond     ::=   RelTerm OpRel RelTerm;
RelTerm     ::=   INT_LIT 
                | ID 
                | LPAREN RelCond RPAREN
                ;